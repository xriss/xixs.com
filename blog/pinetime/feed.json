{
 "feed_url": "https://xixs.com/blog/pinetime/feed.json",
 "home_page_url": "https://xixs.com/",
 "items": [
  {
   "content_html": "\n<div class=\"bloglink\" href=\"https://xixs.com/blog/2020-01-16-pinetime-lcd-driver-notes/\" style=\"cursor: pointer;\" onclick=\"window.location.href=this.getAttribute('href')\">\n <div class=\"bloglink-date\">2020-01-16</div>\n <div class=\"bloglink-title\"><h2 id=\"title\">PineTime LCD Driver Notes</h2>\n<p>This is a (bad) video of interlaced update, so half the display updated \neach frame, just to give an idea of the speed.</p>\n<video width=\"100%\" autoplay loop muted>\n<source src=\"https://xixs.com/blog/2020-01-16-pinetime-lcd-driver-notes/timecake-interlace.mp4\" type=\"video/mp4\" />\n</video>\n\n<p>You can find the driver code here, \n<a href=\"https://github.com/xriss/timecake/blob/master/src/sys/lcd_pine.c\">https://github.com/xriss/timecake/blob/master/src/sys/lcd_pine.c</a> What \nfollows are some notes on why it does things the way it does.</p>\n<p>Fortunately we have a reasonable bit of documentation for the PineTime \nLCD driver, <a href=\"https://wiki.pine64.org/images/5/54/ST7789V_v1.6.pdf\">https://wiki.pine64.org/images/5/54/ST7789V_v1.6.pdf</a> It is \noverly verbose with only a few pages of useful information and I have \nread it through repeatedly. Unfortunately I could not see any way of \ndoing something clever, we are at the other end of a rather slow serial \ninterface with limited control over the format of data we can send \nacross. So bandwidth combined with the lack of display configuration \noptions is a real problem.</p>\n<p>The LCD has a 320x240 display buffer with 666 bits of RGB color output \nresolution, this buffer is used to drive the LCD hardware at 60-30fps. \nWe can send data into this buffer across the serial interface as 444, \n565 or 888 bits of RGB. Since we are mostly bound by the speed of \ntransfer, I recommend only using the 444 mode. Remember, even if you \nuse the 888 mode then it will be truncated to 666 bits before it is \ndisplayed. This may cause ugly banding unless pre dithered to 666 \ncolor.</p>\n<p>I attempted a 240x120, half resolution / double height pixels mode by \ntweaking the scroll registers every scan line. This seems impossible as \nwe do not have access to the blanking interrupt pin and even if we did \nthe documentation (and my tests) suggests that changes are ignored mid \nframe. Which is a shame as it would allow for faster and double \nbuffered full screen updates.</p>\n<p>There is still a double buffered mode we could use but it involves \nthrowing away 80 display lines of pixels. The LCD has a 320x240 buffer \non its end of the serial interface so by only displaying half of it at \nonce (160x240) we can update the other half of memory without changes \nbeing visible until we flip the screen using the scroll registers. I \ndid not consider this worthwhile as it would still only be able to \nmanage around 4fps, but it would be easy enough to add.</p>\n<p>So at best we can manage a few frames per second, lets say 4fps, for a \nfull screen update. Obviously we can double that with interleaved \nupdates but that&#39;s as good as it gets and we can not even double buffer \nthese full screen updates. They look more like wipes than animation \nflips.</p>\n<p>The actual display code ended up rather simple, we do not have enough \nRAM for fullscreen buffers on the CPU so we use a \n<a href=\"http://shadertoy.com/\">shadertoy</a> style system with a hook function \ncalled for each x,y pixel returning a 24bit color value, 0xrrggbb or -1 \nfor transparent. We even try and interleave the calls to this function \nwith the serial data transfer so we are using the time we would be \nwaiting for data to transmit to the LCD to work out what color the next \npixel will be. </p>\n<p>This allows us to craft simple functions that take an XY location and \nreturn an RGB color, these do not require any ram buffers as the data \nis sent immediately to the LCD.</p>\n<p>Finally an important note about hardware : One thing I did discover is \nthat using NRF_SPI0 to send data to the LCD means that we can not use \nNRF_TWIM0 to talk to the I2C devices since they both use the same \nhardware. Not a problem, it just means we have to use NRF_TWIM1 for the \nI2C devices. This is probably documented somewhere in the NRF52 chip \ndocumentation but I have no idea where and found it out the hard way.</p>\n</div>\n</div>\n",
   "date_published": "2020-01-16T00:00:00.000Z",
   "id": "https://xixs.com/blog/2020-01-16-pinetime-lcd-driver-notes/",
   "tags": [
    "pinetime"
   ],
   "title": "PineTime LCD Driver Notes",
   "url": "https://xixs.com/blog/2020-01-16-pinetime-lcd-driver-notes/"
  },
  {
   "content_html": "\n<div class=\"bloglink\" href=\"https://xixs.com/blog/2020-01-15-deadpi/\" style=\"cursor: pointer;\" onclick=\"window.location.href=this.getAttribute('href')\">\n <div class=\"bloglink-date\">2020-01-15</div>\n <div class=\"bloglink-title\"><h2 id=\"title\">DeadPi</h2>\n<p>I have successfully killed my first PI. This brings the dead hardware \ntotal of the <a href=\"https://github.com/xriss/timecake\">timecake</a> project to \n2, the other casualty is one of the watches.</p>\n<img src=\"https://xixs.com/blog/2020-01-15-deadpi/byebyepi.jpg\" width=\"100%\" />\n\n<p>That poor PIs light will never be lit again and the chip gets rather \nhot when you plug it in.</p>\n<p>I&#39;m not sure what killed the first watch it mostly still works but I \ncan not connect to the SWD pins, one of which seem to be shorted. So \nthey are both probably casualties of poking the wrong wire in the wrong \nplace.</p>\n<p>I had been reasonably careful with disconnecting the PI&#39;s power before \nconnecting the watch so I think the PI was killed by the watches \nbattery (I was testing the battery % and had it fully charged). This \nall goes to prove that I should solder some more reasonable connections \nto the watch before continuing.</p>\n<p>Luckily the project is in a working state, with the rom flashed to the \nwatch working as an actual watch. So I think we are going to take a \nlittle break from this hardware for a while and come back with some \nfresh enthusiasm and maybe buy another spare watch just in case. Like \nmost people I have a box of old PI&#39;s under the bed so that is \nnot a problem.</p>\n</div>\n</div>\n",
   "date_published": "2020-01-15T00:00:00.000Z",
   "id": "https://xixs.com/blog/2020-01-15-deadpi/",
   "tags": [
    "pinetime"
   ],
   "title": "DeadPi",
   "url": "https://xixs.com/blog/2020-01-15-deadpi/"
  }
 ],
 "title": "XIXs Blog",
 "version": "https://jsonfeed.org/version/1"
}