<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XIXs Blog</title>
  <id>https://xixs.com/blog/pinetime/feed.xml</id>
  <updated>2020-01-16T00:00:00.000Z</updated>
  <link rel="self" type="application/atom+xml" href="https://xixs.com/blog/pinetime/feed.xml"/>
  <link rel="alternate" type="application/json" href="https://xixs.com/blog/pinetime/feed.json"/>
  <link rel="alternate" type="text/html" href="https://xixs.com/"/>
  <generator uri="https://github.com/bcomnes/jsonfeed-to-atom#readme" version="1.2.5">jsonfeed-to-atom</generator>
  <entry>
    <id>https://xixs.com/blog/2020-01-16-pinetime-lcd-driver-notes/</id>
    <title>PineTime LCD Driver Notes</title>
    <updated>2020-01-16T00:00:00.000Z</updated>
    <published>2020-01-16T00:00:00.000Z</published>
    <content type="html"><![CDATA[
<div class="bloglink" href="https://xixs.com/blog/2020-01-16-pinetime-lcd-driver-notes/" style="cursor: pointer;" onclick="window.location.href=this.getAttribute('href')">
 <div class="bloglink-date">2020-01-16</div>
 <div class="bloglink-title"><h2 id="title">PineTime LCD Driver Notes</h2>
<p>This is a (bad) video of interlaced update, so half the display updated 
each frame, just to give an idea of the speed.</p>
<video width="100%" autoplay loop muted>
<source src="https://xixs.com/blog/2020-01-16-pinetime-lcd-driver-notes/timecake-interlace.mp4" type="video/mp4" />
</video>

<p>You can find the driver code here, 
<a href="https://github.com/xriss/timecake/blob/master/src/sys/lcd_pine.c">https://github.com/xriss/timecake/blob/master/src/sys/lcd_pine.c</a> What 
follows are some notes on why it does things the way it does.</p>
<p>Fortunately we have a reasonable bit of documentation for the PineTime 
LCD driver, <a href="https://wiki.pine64.org/images/5/54/ST7789V_v1.6.pdf">https://wiki.pine64.org/images/5/54/ST7789V_v1.6.pdf</a> It is 
overly verbose with only a few pages of useful information and I have 
read it through repeatedly. Unfortunately I could not see any way of 
doing something clever, we are at the other end of a rather slow serial 
interface with limited control over the format of data we can send 
across. So bandwidth combined with the lack of display configuration 
options is a real problem.</p>
<p>The LCD has a 320x240 display buffer with 666 bits of RGB color output 
resolution, this buffer is used to drive the LCD hardware at 60-30fps. 
We can send data into this buffer across the serial interface as 444, 
565 or 888 bits of RGB. Since we are mostly bound by the speed of 
transfer, I recommend only using the 444 mode. Remember, even if you 
use the 888 mode then it will be truncated to 666 bits before it is 
displayed. This may cause ugly banding unless pre dithered to 666 
color.</p>
<p>I attempted a 240x120, half resolution / double height pixels mode by 
tweaking the scroll registers every scan line. This seems impossible as 
we do not have access to the blanking interrupt pin and even if we did 
the documentation (and my tests) suggests that changes are ignored mid 
frame. Which is a shame as it would allow for faster and double 
buffered full screen updates.</p>
<p>There is still a double buffered mode we could use but it involves 
throwing away 80 display lines of pixels. The LCD has a 320x240 buffer 
on its end of the serial interface so by only displaying half of it at 
once (160x240) we can update the other half of memory without changes 
being visible until we flip the screen using the scroll registers. I 
did not consider this worthwhile as it would still only be able to 
manage around 4fps, but it would be easy enough to add.</p>
<p>So at best we can manage a few frames per second, lets say 4fps, for a 
full screen update. Obviously we can double that with interleaved 
updates but that&#39;s as good as it gets and we can not even double buffer 
these full screen updates. They look more like wipes than animation 
flips.</p>
<p>The actual display code ended up rather simple, we do not have enough 
RAM for fullscreen buffers on the CPU so we use a 
<a href="http://shadertoy.com/">shadertoy</a> style system with a hook function 
called for each x,y pixel returning a 24bit color value, 0xrrggbb or -1 
for transparent. We even try and interleave the calls to this function 
with the serial data transfer so we are using the time we would be 
waiting for data to transmit to the LCD to work out what color the next 
pixel will be. </p>
<p>This allows us to craft simple functions that take an XY location and 
return an RGB color, these do not require any ram buffers as the data 
is sent immediately to the LCD.</p>
<p>Finally an important note about hardware : One thing I did discover is 
that using NRF_SPI0 to send data to the LCD means that we can not use 
NRF_TWIM0 to talk to the I2C devices since they both use the same 
hardware. Not a problem, it just means we have to use NRF_TWIM1 for the 
I2C devices. This is probably documented somewhere in the NRF52 chip 
documentation but I have no idea where and found it out the hard way.</p>
</div>
</div>
]]></content>
    <link rel="alternate" href="https://xixs.com/blog/2020-01-16-pinetime-lcd-driver-notes/"/>
    <category term="pinetime"/>
  </entry>
  <entry>
    <id>https://xixs.com/blog/2020-01-15-deadpi/</id>
    <title>DeadPi</title>
    <updated>2020-01-15T00:00:00.000Z</updated>
    <published>2020-01-15T00:00:00.000Z</published>
    <content type="html"><![CDATA[
<div class="bloglink" href="https://xixs.com/blog/2020-01-15-deadpi/" style="cursor: pointer;" onclick="window.location.href=this.getAttribute('href')">
 <div class="bloglink-date">2020-01-15</div>
 <div class="bloglink-title"><h2 id="title">DeadPi</h2>
<p>I have successfully killed my first PI. This brings the dead hardware 
total of the <a href="https://github.com/xriss/timecake">timecake</a> project to 
2, the other casualty is one of the watches.</p>
<img src="https://xixs.com/blog/2020-01-15-deadpi/byebyepi.jpg" width="100%" />

<p>That poor PIs light will never be lit again and the chip gets rather 
hot when you plug it in.</p>
<p>I&#39;m not sure what killed the first watch it mostly still works but I 
can not connect to the SWD pins, one of which seem to be shorted. So 
they are both probably casualties of poking the wrong wire in the wrong 
place.</p>
<p>I had been reasonably careful with disconnecting the PI&#39;s power before 
connecting the watch so I think the PI was killed by the watches 
battery (I was testing the battery % and had it fully charged). This 
all goes to prove that I should solder some more reasonable connections 
to the watch before continuing.</p>
<p>Luckily the project is in a working state, with the rom flashed to the 
watch working as an actual watch. So I think we are going to take a 
little break from this hardware for a while and come back with some 
fresh enthusiasm and maybe buy another spare watch just in case. Like 
most people I have a box of old PI&#39;s under the bed so that is 
not a problem.</p>
</div>
</div>
]]></content>
    <link rel="alternate" href="https://xixs.com/blog/2020-01-15-deadpi/"/>
    <category term="pinetime"/>
  </entry>
</feed>